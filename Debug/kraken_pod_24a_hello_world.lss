
kraken_pod_24a_hello_world.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000114  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000168  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000168  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000198  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  000001d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006d3  00000000  00000000  0000021c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000586  00000000  00000000  000008ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000035f  00000000  00000000  00000e75  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000088  00000000  00000000  000011d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000351  00000000  00000000  0000125c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000014d  00000000  00000000  000015ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  000016fa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	10 c0       	rjmp	.+32     	; 0x22 <__ctors_end>
   2:	15 c0       	rjmp	.+42     	; 0x2e <__bad_interrupt>
   4:	15 c0       	rjmp	.+42     	; 0x30 <__vector_2>
   6:	13 c0       	rjmp	.+38     	; 0x2e <__bad_interrupt>
   8:	12 c0       	rjmp	.+36     	; 0x2e <__bad_interrupt>
   a:	11 c0       	rjmp	.+34     	; 0x2e <__bad_interrupt>
   c:	10 c0       	rjmp	.+32     	; 0x2e <__bad_interrupt>
   e:	0f c0       	rjmp	.+30     	; 0x2e <__bad_interrupt>
  10:	0e c0       	rjmp	.+28     	; 0x2e <__bad_interrupt>
  12:	0d c0       	rjmp	.+26     	; 0x2e <__bad_interrupt>
  14:	0c c0       	rjmp	.+24     	; 0x2e <__bad_interrupt>
  16:	0b c0       	rjmp	.+22     	; 0x2e <__bad_interrupt>
  18:	0a c0       	rjmp	.+20     	; 0x2e <__bad_interrupt>
  1a:	09 c0       	rjmp	.+18     	; 0x2e <__bad_interrupt>
  1c:	08 c0       	rjmp	.+16     	; 0x2e <__bad_interrupt>
  1e:	07 c0       	rjmp	.+14     	; 0x2e <__bad_interrupt>
  20:	06 c0       	rjmp	.+12     	; 0x2e <__bad_interrupt>

00000022 <__ctors_end>:
  22:	11 24       	eor	r1, r1
  24:	1f be       	out	0x3f, r1	; 63
  26:	cf ed       	ldi	r28, 0xDF	; 223
  28:	cd bf       	out	0x3d, r28	; 61
  2a:	32 d0       	rcall	.+100    	; 0x90 <main>
  2c:	71 c0       	rjmp	.+226    	; 0x110 <_exit>

0000002e <__bad_interrupt>:
  2e:	e8 cf       	rjmp	.-48     	; 0x0 <__vectors>

00000030 <__vector_2>:
	TCCR0A |= (1 << COM0B1); // Clear OC0B output on compare match, upwards counting.
}

void pwm_write (uint8_t val)
{
	OCR0B = val;  //LED Control signal on PA2
  30:	1f 92       	push	r1
  32:	0f 92       	push	r0
  34:	0f b6       	in	r0, 0x3f	; 63
  36:	0f 92       	push	r0
  38:	11 24       	eor	r1, r1
  3a:	8f 93       	push	r24
  3c:	9f 93       	push	r25
  3e:	c9 9b       	sbis	0x19, 1	; 25
  40:	04 c0       	rjmp	.+8      	; 0x4a <__SREG__+0xb>
  42:	9b b3       	in	r25, 0x1b	; 27
  44:	84 e0       	ldi	r24, 0x04	; 4
  46:	89 27       	eor	r24, r25
  48:	8b bb       	out	0x1b, r24	; 27
  4a:	9f 91       	pop	r25
  4c:	8f 91       	pop	r24
  4e:	0f 90       	pop	r0
  50:	0f be       	out	0x3f, r0	; 63
  52:	0f 90       	pop	r0
  54:	1f 90       	pop	r1
  56:	18 95       	reti

00000058 <pwm_setup>:
  58:	83 b7       	in	r24, 0x33	; 51
  5a:	82 60       	ori	r24, 0x02	; 2
  5c:	83 bf       	out	0x33, r24	; 51
  5e:	80 b7       	in	r24, 0x30	; 48
  60:	83 60       	ori	r24, 0x03	; 3
  62:	80 bf       	out	0x30, r24	; 48
  64:	80 b7       	in	r24, 0x30	; 48
  66:	80 62       	ori	r24, 0x20	; 32
  68:	80 bf       	out	0x30, r24	; 48
  6a:	08 95       	ret

0000006c <adc_setup>:
}

void adc_setup (void)
{
	ADMUX |= (1 << MUX0) | (1 << MUX1)|(1 << REFS1);//| (1 << MUX2)  //Measure Current Consumption on PA3(ADC3) and Set the VRef = 1.1V (i.e. internal reference)
  6c:	87 b1       	in	r24, 0x07	; 7
  6e:	83 68       	ori	r24, 0x83	; 131
  70:	87 b9       	out	0x07, r24	; 7
	
	//ADCSRB |= (1 << ADLAR); //If the result is left adjusted (ADLAR = 1) and no more than 8-bit precision is required, it is sufficient to read ADCH

	ADCSRA |= (1 << ADPS1) | (1 << ADPS0) | (1 << ADEN); // Set the prescaler to clock/8 & enable ADC
  72:	86 b1       	in	r24, 0x06	; 6
  74:	83 68       	ori	r24, 0x83	; 131
  76:	86 b9       	out	0x06, r24	; 6
  78:	08 95       	ret

0000007a <adc_read>:
}

uint16_t adc_read (void)
{
	uint16_t adc_out = 0;
	ADCSRA |= (1 << ADEN); // Turning ADC Off
  7a:	37 9a       	sbi	0x06, 7	; 6
	
	ADCSRA |= (1 << ADSC); // Start the conversion
  7c:	36 9a       	sbi	0x06, 6	; 6

	// Wait for it to finish - blocking
	while (ADCSRA & (1 << ADSC));	// Recommended over "while (!(ADCSRA & (1 << ADIF)));" due to input pin hysteresis (?)
  7e:	36 99       	sbic	0x06, 6	; 6
  80:	fe cf       	rjmp	.-4      	; 0x7e <adc_read+0x4>
	ADCSRA |= (1 << ADIF); // Manually clearing the ADIF flag by writing Logic 1 (ATTiny24a Sec. 16.13.2)
  82:	34 9a       	sbi	0x06, 4	; 6
	
	adc_out = ADCL; //Make sure to read ADCL before ADCH or they won't clear
  84:	84 b1       	in	r24, 0x04	; 4
	adc_out = (ADCH << 8)| adc_out;
  86:	25 b1       	in	r18, 0x05	; 5
	
	ADCSRA &= ~(1 << ADEN); // Turning ADC Off
  88:	37 98       	cbi	0x06, 7	; 6
	return adc_out;
  8a:	90 e0       	ldi	r25, 0x00	; 0
}
  8c:	92 2b       	or	r25, r18
  8e:	08 95       	ret

00000090 <main>:
int main(void)
{
	uint16_t adc_in;
	
	// LED is an output.
	DDRA |= (1 << LED_PWM);
  90:	d7 9a       	sbi	0x1a, 7	; 26
	
	adc_setup();
  92:	ec df       	rcall	.-40     	; 0x6c <adc_setup>
	pwm_setup();
  94:	e1 df       	rcall	.-62     	; 0x58 <pwm_setup>

	DDRA |= _BV(LED_RED);           // Set port PA2 as output (all others are input)
  96:	d2 9a       	sbi	0x1a, 2	; 26
	
	PCMSK0 |= _BV(SW_LED_RED);            // Set pin change interrupt mask to listen to port PA1
  98:	91 9a       	sbi	0x12, 1	; 18
	
	MCUCR = _BV(ISC01) | _BV(ISC00);  // Set interrupt on INT0 pin falling edge (high pulled to low)
  9a:	83 e0       	ldi	r24, 0x03	; 3
  9c:	85 bf       	out	0x35, r24	; 53
	
	GIMSK |= _BV(PCIE0);              // Enable PCINT interrupt
  9e:	8b b7       	in	r24, 0x3b	; 59
  a0:	80 61       	ori	r24, 0x10	; 16
  a2:	8b bf       	out	0x3b, r24	; 59

	sei();  	                      // Global interrupts
  a4:	78 94       	sei

	set_sleep_mode(SLEEP_MODE_PWR_DOWN);
  a6:	85 b7       	in	r24, 0x35	; 53
  a8:	87 7e       	andi	r24, 0xE7	; 231
  aa:	80 61       	ori	r24, 0x10	; 16
  ac:	85 bf       	out	0x35, r24	; 53

	PORTA ^= _BV(LED_RED);
  ae:	9b b3       	in	r25, 0x1b	; 27
  b0:	84 e0       	ldi	r24, 0x04	; 4
  b2:	89 27       	eor	r24, r25
  b4:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b6:	2f e3       	ldi	r18, 0x3F	; 63
  b8:	8d e0       	ldi	r24, 0x0D	; 13
  ba:	93 e0       	ldi	r25, 0x03	; 3
  bc:	21 50       	subi	r18, 0x01	; 1
  be:	80 40       	sbci	r24, 0x00	; 0
  c0:	90 40       	sbci	r25, 0x00	; 0
  c2:	e1 f7       	brne	.-8      	; 0xbc <main+0x2c>
  c4:	00 c0       	rjmp	.+0      	; 0xc6 <main+0x36>
  c6:	00 00       	nop
	_delay_ms(250);
	while (1)
	{
		adc_in = 0;
		adc_in = adc_read(); // 1/2 battery voltage
  c8:	d8 df       	rcall	.-80     	; 0x7a <adc_read>

		//pwm_write(adc_in);
		if(adc_in > 1){
  ca:	02 97       	sbiw	r24, 0x02	; 2
  cc:	b0 f0       	brcs	.+44     	; 0xfa <__stack+0x1b>
  ce:	80 e0       	ldi	r24, 0x00	; 0
			//PORTA ^= _BV(LED_RED);
			// Update Output Compare Register (PWM 0-100%)
			for (int i = 0; i < 255 ; i++ ){
				OCR0B = i;
  d0:	8c bf       	out	0x3c, r24	; 60
  d2:	e7 e8       	ldi	r30, 0x87	; 135
  d4:	f3 e1       	ldi	r31, 0x13	; 19
  d6:	31 97       	sbiw	r30, 0x01	; 1
  d8:	f1 f7       	brne	.-4      	; 0xd6 <main+0x46>
  da:	00 c0       	rjmp	.+0      	; 0xdc <main+0x4c>
  dc:	00 00       	nop
  de:	8f 5f       	subi	r24, 0xFF	; 255

		//pwm_write(adc_in);
		if(adc_in > 1){
			//PORTA ^= _BV(LED_RED);
			// Update Output Compare Register (PWM 0-100%)
			for (int i = 0; i < 255 ; i++ ){
  e0:	8f 3f       	cpi	r24, 0xFF	; 255
  e2:	b1 f7       	brne	.-20     	; 0xd0 <main+0x40>
  e4:	8f ef       	ldi	r24, 0xFF	; 255
  e6:	90 e0       	ldi	r25, 0x00	; 0
				_delay_ms(5);
			}

			// Update Output Compare Register (PWM 100%-0)
			for (int i = 255 ; i >= 0 ; i-- ){
				OCR0B = i;
  e8:	8c bf       	out	0x3c, r24	; 60
  ea:	e7 e8       	ldi	r30, 0x87	; 135
  ec:	f3 e1       	ldi	r31, 0x13	; 19
  ee:	31 97       	sbiw	r30, 0x01	; 1
  f0:	f1 f7       	brne	.-4      	; 0xee <__stack+0xf>
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <__stack+0x15>
  f4:	00 00       	nop
				OCR0B = i;
				_delay_ms(5);
			}

			// Update Output Compare Register (PWM 100%-0)
			for (int i = 255 ; i >= 0 ; i-- ){
  f6:	01 97       	sbiw	r24, 0x01	; 1
  f8:	b8 f7       	brcc	.-18     	; 0xe8 <__stack+0x9>
				OCR0B = i;
				_delay_ms(5);
			}
		}
		sleep_cpu();
  fa:	88 95       	sleep
  fc:	2f ef       	ldi	r18, 0xFF	; 255
  fe:	84 e3       	ldi	r24, 0x34	; 52
 100:	9c e0       	ldi	r25, 0x0C	; 12
 102:	21 50       	subi	r18, 0x01	; 1
 104:	80 40       	sbci	r24, 0x00	; 0
 106:	90 40       	sbci	r25, 0x00	; 0
 108:	e1 f7       	brne	.-8      	; 0x102 <__stack+0x23>
 10a:	00 c0       	rjmp	.+0      	; 0x10c <__stack+0x2d>
 10c:	00 00       	nop
 10e:	dc cf       	rjmp	.-72     	; 0xc8 <main+0x38>

00000110 <_exit>:
 110:	f8 94       	cli

00000112 <__stop_program>:
 112:	ff cf       	rjmp	.-2      	; 0x112 <__stop_program>
